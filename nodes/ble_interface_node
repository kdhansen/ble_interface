#!/usr/bin/env python

import rospy
from sensor_msgs.msg import BatteryState
from geometry_msgs.msg import Point, Quaternion
from geometry_msgs.msg import PoseStamped
from nav_msgs.msg import Odometry
import gobject
from ble_interface import GattServer
from ble_interface import BleAdvertisement
import dbus

class RobotAdvertisement(BleAdvertisement.Advertisement):

    def __init__(self, bus, index):
        super(RobotAdvertisement, self).__init__(bus, index, 'peripheral')
        # self.add_service_uuid('180F') # 180F - Battery Service
        # self.add_service_uuid('c2ad5ff9-f58c-4c72-9f01-7c5b3ee1f595') # Odometry service
        self.include_tx_power = True

# The Battery service
class BatteryService(GattServer.Service):
    BATTERY_UUID = '180f'

    def __init__(self, bus, index):
        super(BatteryService, self).__init__(bus, index, self.BATTERY_UUID, True)
        self.add_characteristic(BatteryLevelCharacteristic(bus, 0, self))


class BatteryLevelCharacteristic(GattServer.Characteristic):
    BATTERY_LVL_UUID = '2a19'

    def __init__(self, bus, index, service):
        super(BatteryLevelCharacteristic, self).__init__(
                bus, index,
                self.BATTERY_LVL_UUID,
                ['read', 'notify'],
                service)
        self.notifying = False
        self.battery_lvl = 100

    def notify_battery_level(self):
        if not self.notifying:
            return
        self.PropertiesChanged(
                GattServer.GATT_CHRC_IFACE,
                { 'Value': [dbus.Byte(self.battery_lvl)] }, [])

    def level_cb(self, data):
        int_percentage = int(data.percentage)
        if self.battery_lvl != int_percentage:
            rospy.logdebug('Updated battery level to %d', int_percentage)
            self.battery_lvl = int_percentage
            self.notify_battery_level()
        return

    def ReadValue(self):
        rospy.logdebug('Battery Level read: ' + repr(self.battery_lvl))
        return [dbus.Byte(self.battery_lvl)]

    def StartNotify(self):
        if self.notifying:
            rospy.logdebug('Already notifying, nothing to do')
            return

        self.notifying = True
        self.notify_battery_level()

    def StopNotify(self):
        if not self.notifying:
            rospy.logdebug('Not notifying, nothing to do')
            return

        self.notifying = False

# The Odometry service
class OdometryService(GattServer.Service):
    ODOMETRY_UUID = 'c2ad5ff9-f58c-4c72-9f01-7c5b3ee1f595'

    def __init__(self, bus, index):
        super(OdometryService, self).__init__(bus, index, self.ODOMETRY_UUID, True)
        self.add_characteristic(BasePositionCharacteristic(bus, 0, self))
        self.add_characteristic(BaseOrientationCharacteristic(bus, 1, self))
        # self.add_characteristic(BaseLinearVelocityCharacteristic(bus, 2, self))
        # self.add_characteristic(BaseAngularVelocityCharacteristic(bus, 3, self))

class BasePositionCharacteristic(GattServer.Characteristic):
    BASE_POSITION_UUID = 'b2c1fa1e-0757-4bff-89e3-b2d379ed0d91'

    def __init__(self, bus, index, service):
        super(BasePositionCharacteristic, self).__init__(
            bus, index,
            self.BASE_POSITION_UUID,
            ['read', 'notify'],
            service)
        self.notifying = False
        self.position = Point(0,0,0)
        self.add_descriptor(
            GattServer.CharacteristicUserDescriptionDescriptor(
                bus, 1, self, 'Robot Position'))

    def position_to_bytelist(self):
        x = int(self.position.x*1000)
        x = bytelist_from_int(x, 4)
        y = int(self.position.y*1000)
        y = bytelist_from_int(y, 4)
        z = int(self.position.z*1000)
        z = bytelist_from_int(z, 4)
        return x+y+z

    def notify_position(self):
        if not self.notifying:
            return
        bl = self.position_to_bytelist()
        self.PropertiesChanged(
            GattServer.GATT_CHRC_IFACE,
            { 'Value': dbus.Array(bl, 'y') }, [])

    def position_cb(self, data):
        if self.position != data.pose.pose.position:
            self.position = data.pose.pose.position
            rospy.logdebug('Updated position: ' + repr(self.position))
            self.notify_position()
        return

    def ReadValue(self):
        rospy.logdebug('Position read: ' + repr(self.position))
        return dbus.Array(self.position_to_bytelist(), signature='y')

    def StartNotify(self):
        if self.notifying:
            rospy.logdebug('Already notifying, nothing to do')
            return

        self.notifying = True
        self.notify_position()

    def StopNotify(self):
        if not self.notifying:
            rospy.logdebug('Not notifying, nothing to do')
            return

        self.notifying = False

class BaseOrientationCharacteristic(GattServer.Characteristic):
    BASE_ORIENTATION_UUID = '6f805177-4e54-4bd6-9670-5591c2912875'

    def __init__(self, bus, index, service):
        super(BaseOrientationCharacteristic, self).__init__(
                bus, index,
                self.BASE_ORIENTATION_UUID,
                ['read', 'notify'],
                service)
        self.notifying = False
        self.orientation = Quaternion(1,0,0,0)
        self.add_descriptor(
            GattServer.CharacteristicUserDescriptionDescriptor(
                bus,
                1,
                self,
                'Robot Orientation'))

    def orientation_to_bytelist(self):
        x = int(self.orientation.x * 1000000000)
        x = bytelist_from_int(x, 4)
        y = int(self.orientation.y * 1000000000)
        y = bytelist_from_int(y, 4)
        z = int(self.orientation.z * 1000000000)
        z = bytelist_from_int(z, 4)
        w = int(self.orientation.w * 1000000000)
        w = bytelist_from_int(w, 4)
        return x+y+z+w

    def notify_orientation(self):
        if not self.notifying:
            return
        bl = self.orientation_to_bytelist()
        self.PropertiesChanged(
            GattServer.GATT_CHRC_IFACE,
            { 'Value': dbus.Array(bl, 'y') }, [])


    def orientation_cb(self, data):
        if self.orientation != data.pose.pose.orientation:
            self.orientation = data.pose.pose.orientation
            rospy.logdebug('Updated orientation: ' + repr(self.orientation))
            self.notify_orientation()
        return

    def ReadValue(self):
        rospy.logdebug('Orientation read: ' + repr(self.orientation))
        return dbus.Array(self.orientation_to_bytelist(), signature='y')

    def StartNotify(self):
        if self.notifying:
            rospy.logdebug('Already notifying, nothing to do')
            return

        self.notifying = True
        self.notify_orientation()

    def StopNotify(self):
        if not self.notifying:
            rospy.logdebug('Not notifying, nothing to do')
            return

        self.notifying = False

# The Navigation service
class NavigationService(GattServer.Service):
    NAVIGATION_UUID = '4b150dea-e847-453e-89b0-ef28a0de1764'

    def __init__(self, bus, index):
        super(NavigationService, self).__init__(bus, index, self.NAVIGATION_UUID, True)
        self.add_characteristic(GoalPositionCharacteristic(bus, 0, self))

class GoalPositionCharacteristic(GattServer.Characteristic):
    GOAL_POSITION_UUID = '0e2e60ec-d7e3-4be6-9a62-b77f238e3d67'

    def __init__(self, bus, index, service):
        super(GoalPositionCharacteristic, self).__init__(
            bus, index,
            self.GOAL_POSITION_UUID,
            ['read', 'write', 'notify'],
            service)
        self.notifying = False
        self.position = Point(0,0,0)
        self.add_descriptor(
            GattServer.CharacteristicUserDescriptionDescriptor(
                bus, 1, self, 'Goal Position'))
        self.pub = rospy.Publisher('move_base_simple/goal', PoseStamped, queue_size=1)

    def position_to_bytelist(self):
        x = int(self.position.x*1000)
        x = bytelist_from_int(x, 4)
        y = int(self.position.y*1000)
        y = bytelist_from_int(y, 4)
        z = int(self.position.z*1000)
        z = bytelist_from_int(z, 4)
        return x+y+z

    def notify_position(self):
        if not self.notifying:
            return
        bl = self.position_to_bytelist()
        self.PropertiesChanged(
            GattServer.GATT_CHRC_IFACE,
            { 'Value': dbus.Array(bl, 'y') }, [])

    def position_cb(self, data):
        if self.position != data.pose.pose.position:
            self.position = data.pose.pose.position
            rospy.logdebug('Updated position: ' + repr(self.position))
            self.notify_position()
        return

    def ReadValue(self):
        rospy.logdebug('Goal Position read: ' + repr(self.position))
        return dbus.Array(self.position_to_bytelist(), signature='y')

    def WriteValue(self, value):
        self.position.x = int_from_bytelist(value, 0, 4) / 1000.
        self.position.y = int_from_bytelist(value, 4, 8) / 1000.
        self.position.z = int_from_bytelist(value, 8, 12) / 1000.
        rospy.logdebug('Goal Position set to' + repr(self.position))
        ps = PoseStamped()
        ps.header.stamp = rospy.Time.now()
        ps.header.frame_id = "map"
        ps.pose.position = self.position
        self.pub.publish(ps)

    def StartNotify(self):
        if self.notifying:
            rospy.logdebug('Already notifying, nothing to do')
            return

        self.notifying = True
        self.notify_position()

    def StopNotify(self):
        if not self.notifying:
            rospy.logdebug('Not notifying, nothing to do')
            return

        self.notifying = False

def register_service_cb():
    rospy.logdebug('GATT service registered')

def register_service_error_cb(error):
    rospy.logerr('Failed to register service: ' + str(error))
    rospy.signal_shutdown('Could not start Bluetooth service.')

def register_ad_cb():
    rospy.logdebug('Advertisement registered')

def register_ad_error_cb(error):
    rospy.logerr('Failed to register advertisement: ' + str(error))
    rospy.signal_shutdown('Could not advertise Bluetooth service.')

def bytelist_from_int(number, num_bytes):
    # Make sure it is an integer
    number = int(number)
    # Construct the list by shifting one byte at a time.
    byte_list = [(number>>(8*i))&0xff for i in range(num_bytes-1,-1,-1)]
    return byte_list

def int_from_bytelist(byte_list, from_byte, to_byte):
    the_int = 0
    for i, b in enumerate(range(to_byte-1, from_byte-1, -1)):
        the_int += byte_list[b] * (256**i)
    # Two's complement
    if (byte_list[from_byte] & 0x80) != 0:
        the_int = the_int - (1 << (to_byte - from_byte)*8)
    return the_int


def main():
    mainloop = gobject.MainLoop()
    gobject.threads_init()
    rospy.on_shutdown(mainloop.quit)
    dbus.mainloop.glib.DBusGMainLoop(set_as_default=True)

    bus = dbus.SystemBus()

    # Advertize services
    adapter = BleAdvertisement.find_adapter(bus)
    if not adapter:
        rospy.logerr('LEAdvertisingManager1 interface not found')
        return
    adapter_props = dbus.Interface(bus.get_object(BleAdvertisement.BLUEZ_SERVICE_NAME, adapter),
                                   "org.freedesktop.DBus.Properties");
    adapter_props.Set("org.bluez.Adapter1", "Powered", dbus.Boolean(1))
    ad_manager = dbus.Interface(bus.get_object(BleAdvertisement.BLUEZ_SERVICE_NAME, adapter),
                                BleAdvertisement.LE_ADVERTISING_MANAGER_IFACE)
    robot_advertisement = RobotAdvertisement(bus, 0)
    ad_manager.RegisterAdvertisement(robot_advertisement.get_path(), {},
                                     reply_handler=register_ad_cb,
                                     error_handler=register_ad_error_cb)

    # Service
    service_manager = dbus.Interface(
            bus.get_object(GattServer.BLUEZ_SERVICE_NAME, adapter),
            GattServer.GATT_MANAGER_IFACE)

    bat_service = BatteryService(bus, 1)
    service_manager.RegisterService(bat_service.get_path(), {},
                                    reply_handler=register_service_cb,
                                    error_handler=register_service_error_cb)

    odom_service = OdometryService(bus, 2)
    service_manager.RegisterService(odom_service.get_path(), {},
                                    reply_handler=register_service_cb,
                                    error_handler=register_service_error_cb)

    nav_service = NavigationService(bus, 3)
    service_manager.RegisterService(nav_service.get_path(), {},
                                    reply_handler=register_service_cb,
                                    error_handler=register_service_error_cb)

    rospy.init_node('ble_interface_battery', log_level=rospy.DEBUG)
    laptop_charge_sub = rospy.Subscriber('/laptop_charge', BatteryState, bat_service.characteristics[0].level_cb)
    odometry_sub = rospy.Subscriber('/odom', Odometry, odom_service.characteristics[0].position_cb)
    odometry_sub.impl.add_callback(odom_service.characteristics[1].orientation_cb, None)



    mainloop.run()

if __name__ == '__main__':
    main()